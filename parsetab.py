
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN DIVIDE EQ EXIT GE GT ID IF LBRACE LE LPAREN LT MINUS NE NUMBER PLUS PRINT RBRACE RPAREN SEMICOLON STRING TIMES VAR WHILEstatement : VAR ID ASSIGN expression SEMICOLONstatement : ID ASSIGN expression SEMICOLONstatement : PRINT LPAREN STRING RPAREN SEMICOLONstatement : IF LPAREN expression RPAREN LBRACE statements RBRACEstatements : statements statementstatements : statementexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : expression GT expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression LE expression\n                  | expression EQ expression\n                  | expression NE expressionexpression : NUMBERexpression : ID'
    
_lr_action_items = {'VAR':([0,17,30,41,42,43,44,45,46,],[2,-2,-1,-3,2,2,-6,-4,-5,]),'ID':([0,2,7,9,10,17,18,19,20,21,22,23,24,25,26,27,30,41,42,43,44,45,46,],[3,6,11,11,11,-2,11,11,11,11,11,11,11,11,11,11,-1,-3,3,3,-6,-4,-5,]),'PRINT':([0,17,30,41,42,43,44,45,46,],[4,-2,-1,-3,4,4,-6,-4,-5,]),'IF':([0,17,30,41,42,43,44,45,46,],[5,-2,-1,-3,5,5,-6,-4,-5,]),'$end':([1,17,30,41,45,],[0,-2,-1,-3,-4,]),'ASSIGN':([3,6,],[7,10,]),'LPAREN':([4,5,],[8,9,]),'NUMBER':([7,9,10,18,19,20,21,22,23,24,25,26,27,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'STRING':([8,],[14,]),'SEMICOLON':([11,12,13,16,28,31,32,33,34,35,36,37,38,39,40,],[-18,17,-17,30,41,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,]),'PLUS':([11,12,13,15,16,31,32,33,34,35,36,37,38,39,40,],[-18,18,-17,18,18,18,18,18,18,18,18,18,18,18,18,]),'MINUS':([11,12,13,15,16,31,32,33,34,35,36,37,38,39,40,],[-18,19,-17,19,19,19,19,19,19,19,19,19,19,19,19,]),'TIMES':([11,12,13,15,16,31,32,33,34,35,36,37,38,39,40,],[-18,20,-17,20,20,20,20,20,20,20,20,20,20,20,20,]),'DIVIDE':([11,12,13,15,16,31,32,33,34,35,36,37,38,39,40,],[-18,21,-17,21,21,21,21,21,21,21,21,21,21,21,21,]),'GT':([11,12,13,15,16,31,32,33,34,35,36,37,38,39,40,],[-18,22,-17,22,22,22,22,22,22,22,22,22,22,22,22,]),'LT':([11,12,13,15,16,31,32,33,34,35,36,37,38,39,40,],[-18,23,-17,23,23,23,23,23,23,23,23,23,23,23,23,]),'GE':([11,12,13,15,16,31,32,33,34,35,36,37,38,39,40,],[-18,24,-17,24,24,24,24,24,24,24,24,24,24,24,24,]),'LE':([11,12,13,15,16,31,32,33,34,35,36,37,38,39,40,],[-18,25,-17,25,25,25,25,25,25,25,25,25,25,25,25,]),'EQ':([11,12,13,15,16,31,32,33,34,35,36,37,38,39,40,],[-18,26,-17,26,26,26,26,26,26,26,26,26,26,26,26,]),'NE':([11,12,13,15,16,31,32,33,34,35,36,37,38,39,40,],[-18,27,-17,27,27,27,27,27,27,27,27,27,27,27,27,]),'RPAREN':([11,13,14,15,31,32,33,34,35,36,37,38,39,40,],[-18,-17,28,29,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,]),'RBRACE':([17,30,41,43,44,45,46,],[-2,-1,-3,45,-6,-4,-5,]),'LBRACE':([29,],[42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,42,43,],[1,44,46,]),'expression':([7,9,10,18,19,20,21,22,23,24,25,26,27,],[12,15,16,31,32,33,34,35,36,37,38,39,40,]),'statements':([42,],[43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> VAR ID ASSIGN expression SEMICOLON','statement',5,'p_statement_var_assign','parser_1.py',9),
  ('statement -> ID ASSIGN expression SEMICOLON','statement',4,'p_statement_assign','parser_1.py',13),
  ('statement -> PRINT LPAREN STRING RPAREN SEMICOLON','statement',5,'p_statement_print','parser_1.py',20),
  ('statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE','statement',7,'p_statement_if','parser_1.py',24),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser_1.py',30),
  ('statements -> statement','statements',1,'p_statements_single','parser_1.py',34),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser_1.py',39),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser_1.py',40),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser_1.py',41),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser_1.py',42),
  ('expression -> expression GT expression','expression',3,'p_expression_relational','parser_1.py',53),
  ('expression -> expression LT expression','expression',3,'p_expression_relational','parser_1.py',54),
  ('expression -> expression GE expression','expression',3,'p_expression_relational','parser_1.py',55),
  ('expression -> expression LE expression','expression',3,'p_expression_relational','parser_1.py',56),
  ('expression -> expression EQ expression','expression',3,'p_expression_relational','parser_1.py',57),
  ('expression -> expression NE expression','expression',3,'p_expression_relational','parser_1.py',58),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser_1.py',73),
  ('expression -> ID','expression',1,'p_expression_id','parser_1.py',77),
]
