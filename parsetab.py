
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNOTnonassocGTLTGELEEQNEleftPLUSMINUSleftTIMESDIVIDEAND ASSIGN DIVIDE EQ FALSE GE GT ID IF LBRACE LE LPAREN LT MINUS NE NOT NUMBER OR PLUS PRINT RBRACE RPAREN SEMICOLON STRING TIMES TRUE VARstatement : VAR ID ASSIGN expression SEMICOLONstatement : ID ASSIGN expression SEMICOLONstatement : PRINT LPAREN expression RPAREN SEMICOLONstatement : IF LPAREN expression RPAREN LBRACE statements RBRACEstatements : statements statementstatements : statementexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : expression GT expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression LE expression\n                  | expression EQ expression\n                  | expression NE expressionexpression : expression AND expression\n                  | expression OR expressionexpression : NOT expressionexpression : STRINGexpression : NUMBERexpression : IDexpression : TRUEexpression : FALSE'
    
_lr_action_items = {'VAR':([0,21,37,50,51,52,53,54,55,],[2,-2,-1,-3,2,2,-6,-4,-5,]),'ID':([0,2,7,8,9,10,13,21,22,23,24,25,26,27,28,29,30,31,32,33,37,50,51,52,53,54,55,],[3,6,11,11,11,11,11,-2,11,11,11,11,11,11,11,11,11,11,11,11,-1,-3,3,3,-6,-4,-5,]),'PRINT':([0,21,37,50,51,52,53,54,55,],[4,-2,-1,-3,4,4,-6,-4,-5,]),'IF':([0,21,37,50,51,52,53,54,55,],[5,-2,-1,-3,5,5,-6,-4,-5,]),'$end':([1,21,37,50,54,],[0,-2,-1,-3,-4,]),'ASSIGN':([3,6,],[7,10,]),'LPAREN':([4,5,],[8,9,]),'NOT':([7,8,9,10,13,22,23,24,25,26,27,28,29,30,31,32,33,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'STRING':([7,8,9,10,13,22,23,24,25,26,27,28,29,30,31,32,33,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'NUMBER':([7,8,9,10,13,22,23,24,25,26,27,28,29,30,31,32,33,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'TRUE':([7,8,9,10,13,22,23,24,25,26,27,28,29,30,31,32,33,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'FALSE':([7,8,9,10,13,22,23,24,25,26,27,28,29,30,31,32,33,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'SEMICOLON':([11,12,14,15,16,17,20,34,35,38,39,40,41,42,43,44,45,46,47,48,49,],[-22,21,-20,-21,-23,-24,37,-19,50,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,]),'PLUS':([11,12,14,15,16,17,18,19,20,34,38,39,40,41,42,43,44,45,46,47,48,49,],[-22,22,-20,-21,-23,-24,22,22,22,22,-7,-8,-9,-10,22,22,22,22,22,22,22,22,]),'MINUS':([11,12,14,15,16,17,18,19,20,34,38,39,40,41,42,43,44,45,46,47,48,49,],[-22,23,-20,-21,-23,-24,23,23,23,23,-7,-8,-9,-10,23,23,23,23,23,23,23,23,]),'TIMES':([11,12,14,15,16,17,18,19,20,34,38,39,40,41,42,43,44,45,46,47,48,49,],[-22,24,-20,-21,-23,-24,24,24,24,24,24,24,-9,-10,24,24,24,24,24,24,24,24,]),'DIVIDE':([11,12,14,15,16,17,18,19,20,34,38,39,40,41,42,43,44,45,46,47,48,49,],[-22,25,-20,-21,-23,-24,25,25,25,25,25,25,-9,-10,25,25,25,25,25,25,25,25,]),'GT':([11,12,14,15,16,17,18,19,20,34,38,39,40,41,42,43,44,45,46,47,48,49,],[-22,26,-20,-21,-23,-24,26,26,26,26,-7,-8,-9,-10,None,None,None,None,None,None,26,26,]),'LT':([11,12,14,15,16,17,18,19,20,34,38,39,40,41,42,43,44,45,46,47,48,49,],[-22,27,-20,-21,-23,-24,27,27,27,27,-7,-8,-9,-10,None,None,None,None,None,None,27,27,]),'GE':([11,12,14,15,16,17,18,19,20,34,38,39,40,41,42,43,44,45,46,47,48,49,],[-22,28,-20,-21,-23,-24,28,28,28,28,-7,-8,-9,-10,None,None,None,None,None,None,28,28,]),'LE':([11,12,14,15,16,17,18,19,20,34,38,39,40,41,42,43,44,45,46,47,48,49,],[-22,29,-20,-21,-23,-24,29,29,29,29,-7,-8,-9,-10,None,None,None,None,None,None,29,29,]),'EQ':([11,12,14,15,16,17,18,19,20,34,38,39,40,41,42,43,44,45,46,47,48,49,],[-22,30,-20,-21,-23,-24,30,30,30,30,-7,-8,-9,-10,None,None,None,None,None,None,30,30,]),'NE':([11,12,14,15,16,17,18,19,20,34,38,39,40,41,42,43,44,45,46,47,48,49,],[-22,31,-20,-21,-23,-24,31,31,31,31,-7,-8,-9,-10,None,None,None,None,None,None,31,31,]),'AND':([11,12,14,15,16,17,18,19,20,34,38,39,40,41,42,43,44,45,46,47,48,49,],[-22,32,-20,-21,-23,-24,32,32,32,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,32,]),'OR':([11,12,14,15,16,17,18,19,20,34,38,39,40,41,42,43,44,45,46,47,48,49,],[-22,33,-20,-21,-23,-24,33,33,33,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,]),'RPAREN':([11,14,15,16,17,18,19,34,38,39,40,41,42,43,44,45,46,47,48,49,],[-22,-20,-21,-23,-24,35,36,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,]),'RBRACE':([21,37,50,52,53,54,55,],[-2,-1,-3,54,-6,-4,-5,]),'LBRACE':([36,],[51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,51,52,],[1,53,55,]),'expression':([7,8,9,10,13,22,23,24,25,26,27,28,29,30,31,32,33,],[12,18,19,20,34,38,39,40,41,42,43,44,45,46,47,48,49,]),'statements':([51,],[52,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> VAR ID ASSIGN expression SEMICOLON','statement',5,'p_statement_var_assign','parser_1.py',9),
  ('statement -> ID ASSIGN expression SEMICOLON','statement',4,'p_statement_assign','parser_1.py',13),
  ('statement -> PRINT LPAREN expression RPAREN SEMICOLON','statement',5,'p_statement_print','parser_1.py',20),
  ('statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE','statement',7,'p_statement_if','parser_1.py',24),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser_1.py',40),
  ('statements -> statement','statements',1,'p_statements_single','parser_1.py',44),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser_1.py',49),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser_1.py',50),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser_1.py',51),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser_1.py',52),
  ('expression -> expression GT expression','expression',3,'p_expression_relational','parser_1.py',63),
  ('expression -> expression LT expression','expression',3,'p_expression_relational','parser_1.py',64),
  ('expression -> expression GE expression','expression',3,'p_expression_relational','parser_1.py',65),
  ('expression -> expression LE expression','expression',3,'p_expression_relational','parser_1.py',66),
  ('expression -> expression EQ expression','expression',3,'p_expression_relational','parser_1.py',67),
  ('expression -> expression NE expression','expression',3,'p_expression_relational','parser_1.py',68),
  ('expression -> expression AND expression','expression',3,'p_expression_logic_and_or','parser_1.py',83),
  ('expression -> expression OR expression','expression',3,'p_expression_logic_and_or','parser_1.py',84),
  ('expression -> NOT expression','expression',2,'p_expression_logic_not','parser_1.py',91),
  ('expression -> STRING','expression',1,'p_expression_string','parser_1.py',99),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser_1.py',103),
  ('expression -> ID','expression',1,'p_expression_id','parser_1.py',107),
  ('expression -> TRUE','expression',1,'p_expression_true','parser_1.py',112),
  ('expression -> FALSE','expression',1,'p_expression_false','parser_1.py',116),
]
